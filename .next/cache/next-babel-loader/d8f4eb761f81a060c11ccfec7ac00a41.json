{"ast":null,"code":"var _jsxFileName = \"/Users/iwsr/myCode/works/myself/blog/blog-front/src/pages/index/components/articles/articles.tsx\";\nimport React from 'react';\nimport _ from '@/tools/lodash';\nimport Article from './components/article/article';\nimport './style/articles.less';\nconst newItem = {\n  id: 1,\n  date: '2019-12-31',\n  title: 'GraphQL 实现递归查询',\n  abstract: '当我们需要用 GraphQL 查询多层套嵌的数据，比如像 WordPress 这样套嵌的评论信息时，通常的写法是： { posts(first: 100)通常的写法是： { posts(first: 100)',\n  viewNum: 8000,\n  commentNum: 20,\n  item: '野生技术协会',\n  pic: 'https://2heng.xin/wp-content/uploads//2019/12/2572384-1024x640.jpg'\n};\n\nclass Articles extends React.Component {\n  constructor(props) {\n    super(props);\n    this.line = React.createRef();\n    this.LoadingObserver = null;\n    this.animationObserver = null;\n    this.state = {\n      items: [{\n        id: 1,\n        date: '2019-12-31',\n        title: 'GraphQL 实现递归查询',\n        abstract: '当我们需要用 GraphQL 查询多层套嵌的数据，比如像 WordPress 这样套嵌的评论信息时，通常的写法是： { posts(first: 100)通常的写法是： { posts(first: 100)',\n        viewNum: 8000,\n        commentNum: 20,\n        item: '野生技术协会',\n        pic: 'https://2heng.xin/wp-content/uploads//2019/12/2572384-1024x640.jpg'\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.LoadingObserver = new IntersectionObserver(entries => {\n      const isVisible = entries[0].isIntersecting; // isVisible 触发新元素加入\n\n      if (!isVisible) return false;\n      if (this.state.items.length === 5) return false;\n\n      const items = _.deepClone(this.state.items);\n\n      const testItem = _.deepClone(newItem);\n\n      items.push(testItem);\n      this.setState({\n        items\n      });\n    }, {});\n\n    if (this.line.current) {\n      // 触发加载\n      this.LoadingObserver.observe(this.line.current);\n    }\n  }\n\n  componentWillUnmount() {\n    this.LoadingObserver && this.LoadingObserver.disconnect();\n  }\n\n  render() {\n    const {\n      items\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, // 文章内容不为空\n    items.length > 0 && items.map((item, index) => {\n      return /*#__PURE__*/React.createElement(Article, {\n        key: index,\n        item: item,\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }\n      });\n    }), // 空\n    items.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \"empty\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"observer-line\",\n      ref: this.line,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Articles;","map":{"version":3,"sources":["/Users/iwsr/myCode/works/myself/blog/blog-front/src/pages/index/components/articles/articles.tsx"],"names":["React","_","Article","newItem","id","date","title","abstract","viewNum","commentNum","item","pic","Articles","Component","constructor","props","line","createRef","LoadingObserver","animationObserver","state","items","componentDidMount","IntersectionObserver","entries","isVisible","isIntersecting","length","deepClone","testItem","push","setState","current","observe","componentWillUnmount","disconnect","render","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport _ from '@/tools/lodash';\n\nimport Article from './components/article/article';\n\nimport './style/articles.less';\n\nconst newItem = {\n  id: 1,\n  date: '2019-12-31',\n  title: 'GraphQL 实现递归查询',\n  abstract: '当我们需要用 GraphQL 查询多层套嵌的数据，比如像 WordPress 这样套嵌的评论信息时，通常的写法是： { posts(first: 100)通常的写法是： { posts(first: 100)',\n  viewNum: 8000,\n  commentNum: 20,\n  item: '野生技术协会',\n  pic: 'https://2heng.xin/wp-content/uploads//2019/12/2572384-1024x640.jpg'\n};\n\nclass Articles extends React.Component <IProp, IState> {\n\n  private line: React.RefObject<HTMLDivElement> = React.createRef();\n  private LoadingObserver: IntersectionObserver | null = null;\n  private animationObserver: IntersectionObserver | null = null;\n\n  constructor(props: IProp) {\n    super(props);\n    this.state = {\n      items: [\n        {\n          id: 1,\n          date: '2019-12-31',\n          title: 'GraphQL 实现递归查询',\n          abstract: '当我们需要用 GraphQL 查询多层套嵌的数据，比如像 WordPress 这样套嵌的评论信息时，通常的写法是： { posts(first: 100)通常的写法是： { posts(first: 100)',\n          viewNum: 8000,\n          commentNum: 20,\n          item: '野生技术协会',\n          pic: 'https://2heng.xin/wp-content/uploads//2019/12/2572384-1024x640.jpg'\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.LoadingObserver = new IntersectionObserver((entries) => {\n      const isVisible = entries[0].isIntersecting;\n      // isVisible 触发新元素加入\n      if (!isVisible) return false;\n      if (this.state.items.length === 5) return false;\n      const items = _.deepClone(this.state.items);\n      const testItem = _.deepClone(newItem);\n      items.push(testItem);\n      this.setState({\n        items\n      });\n    }, {\n      \n    });\n\n    if (this.line.current) {\n      // 触发加载\n      this.LoadingObserver.observe(this.line.current);\n    }\n  }\n\n  componentWillUnmount() {\n    this.LoadingObserver && this.LoadingObserver.disconnect();\n  }\n\n  render() {\n    const {items} = this.state;\n    return (\n      <div className=\"items\">\n        {\n          // 文章内容不为空\n          items.length > 0 && items.map((item, index) => {\n            return (\n              <Article key={index} item={item} index={index} />\n            )\n          })\n        }\n        {\n          // 空\n          items.length === 0 && (\n            <div className=\"empty-item\">empty</div>\n          )\n        }\n        <div className=\"observer-line\" ref={this.line}></div>\n      </div>\n    )\n  }\n}\n\ninterface IProp {\n  \n}\n\ninterface IState {\n  items: Array<articles>\n}\n\ninterface articles {\n  id: number,\n  title: string,\n  date: string,\n  abstract: string,\n  viewNum: number,\n  commentNum: number,\n  item: string,\n  pic: string\n}\n\nexport default Articles;"]},"metadata":{},"sourceType":"module"}